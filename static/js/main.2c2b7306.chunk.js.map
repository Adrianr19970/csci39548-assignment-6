{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","GithubDisplay","useState","userInfo","setUserInfo","inputValue","setInputValue","useEffect","getUserInfo","a","fetch","response","json","info","className","id","type","value","onChange","event","target","onClick","login","name","location","created_at","html_url","public_repos","LyricsDisplay","artist","setArtist","title","setTitle","lyrics","setLyrics","axios","get","newlineText","data","console","log","text","split","map","str","WeatherDisplay","weather","setWeather","city","setCity","found","setFound","temperature","wind","description","CovidDisplay","countryInfo","setCountryInfo","getVaccineInfo","editedInput","toLowerCase","eachWord","charAt","toUpperCase","slice","join","indexOf","wordBefore","substring","wordAfter","All","error","administered","people_partially_vaccinated","people_vaccinated","updated","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c2b7306.chunk.js","sourcesContent":["import { render } from '@testing-library/react';\r\nimport React, { Component, useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  /*---------- github mini app ----------*/\r\n  function GithubDisplay(){\r\n    let [userInfo, setUserInfo] = useState({});\r\n    let [inputValue, setInputValue] = useState(\"\");\r\n    let onChange = (event) => {\r\n      setInputValue(event.target.value);\r\n    };\r\n  \r\n    useEffect(() => {\r\n      getUserInfo();\r\n    },\r\n    []);\r\n  \r\n    let getUserInfo = async() => {\r\n      let response = await fetch(\"https://api.github.com/users/\" + inputValue);\r\n      let info = await response.json();\r\n      setUserInfo(info);\r\n    };\r\n\t  return(\r\n\t  <div className=\"App\">\r\n      <div className=\"header\">\r\n        <h1>GitHub User Search</h1>\r\n      </div>\r\n        <div id=\"display\">\r\n          <div id=\"searchBar\">\r\n            <label>Enter a GitHub Username: </label>\r\n              <input\r\n                type = \"text\"\r\n                id = \"search\"\r\n                value = {inputValue}\r\n                onChange = {onChange}\r\n              />\r\n              <button id=\"searchButton\" onClick={getUserInfo}>Search</button>\r\n          </div>\r\n          <div id=\"displayInfo\">\r\n            <h3>Username: {userInfo.login}</h3>\r\n            <h3>Name: {userInfo.name}</h3>\r\n            <h3>Location: {userInfo.location}</h3>\r\n            <h3>User Since: {userInfo.created_at}</h3>\r\n            <h3>Link to Profile: {userInfo.html_url}</h3>\r\n            <h3>Number of Public Repositories: {userInfo.public_repos}</h3>\r\n          </div>\r\n        </div>\r\n    </div>\r\n\t);\r\n  }\r\n  \r\n /*----------lyrics mini app----------*/\r\n  function LyricsDisplay(){\r\n    const[artist, setArtist]= useState(\"\");\r\n    const[title, setTitle]= useState(\"\");\r\n    const[lyrics, setLyrics]=useState(<h3>No results</h3>);\r\n\r\n    function titleChange(event){\r\n      setTitle(event.target.value);\r\n    }\r\n\r\n    function artistChange(event){\r\n      setArtist(event.target.value);\r\n    }\r\n\r\n  /*handles search*/\r\n    async function lyricsChange(){\r\n      try{\r\n        let response = await axios.get(\"https://api.lyrics.ovh/v1/\"+artist+\"/\"+title);\r\n        setLyrics(newlineText(response.data.lyrics));\r\n      }catch(error){\r\n        if(error.response){\r\n         console.log(error.response.data);\r\n         setLyrics(\"No results. Title or Artist may be misspelled.\")\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    /*proper formatting for song, creates array of paragraphs based on where newline characters are \r\n    (i stole this from https://forum.freecodecamp.org/t/newline-in-react-string-solved/68484)*/\r\n    function newlineText(text) {\r\n      const newText = text.split('\\n').map(str => <h3>{str}</h3>);\r\n      return newText;\r\n    }\r\n    \r\n\treturn(\r\n\t  <div className=\"App\">\r\n      <div className=\"lyricsheader\">\r\n        <h1>Lyrics Search</h1>\r\n      </div>\r\n        <div id=\"display\">\r\n          <div id=\"searchBar\">\r\n            <label>Enter Song Title: </label>\r\n              <input\r\n                type = \"text\"\r\n                id = \"search\"\r\n                onChange={titleChange}\r\n              />\r\n            <label> Enter Artist: </label>\r\n            <input \r\n            type = \"text\"\r\n            id= \"search\"\r\n            onChange={artistChange}\r\n            ></input>\r\n              <button id=\"searchButton\" onClick={lyricsChange}>Search</button>\r\n          </div>\r\n          <div id=\"displayInfo\">\r\n            <p>\r\n              {lyrics}\r\n\t\t\t      </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\t);\r\n}\r\n\r\n  /*---------- weather mini app ---------- */\r\n  function WeatherDisplay(){\r\n    const [weather, setWeather]= useState(\"\");\r\n    const [city, setCity]= useState(\"\");\r\n    const [found, setFound]= useState(false);\r\n\r\n\r\n    function cityChange(event){\r\n      setCity(event.target.value);\r\n    }\r\n\r\n    /*changes weather state*/\r\n    async function weatherChange(){\r\n      try{\r\n        let response = await axios.get(\"https://goweather.herokuapp.com/weather/\"+city);\r\n        setWeather(response.data);\r\n        setFound(true);\r\n      }catch(error){\r\n        if(error.response){\r\n         console.log(error.response.data);\r\n         setFound(false)\r\n        }\r\n      }\r\n    }\r\n\r\n    return(\r\n      <div className=\"App\">\r\n      <div className=\"weatherheader\">\r\n        <h1>Weather</h1>\r\n      </div>\r\n        <div id=\"display\">\r\n          <div id=\"searchBar\">\r\n            <label>City </label>\r\n              <input\r\n                type = \"text\"\r\n                id = \"search\"\r\n                onChange = {cityChange}\r\n              />\r\n              <button id=\"searchButton\" onClick={weatherChange}>Search</button>\r\n          </div>\r\n          <div id=\"displayInfo\">\r\n            {found ? \r\n            <div>\r\n            <h3>City: {city}</h3>\r\n            <h3>Temperature: {weather.temperature}</h3>\r\n            <h3>Wind: {weather.wind}</h3>\r\n            <h3>{weather.description}</h3>\r\n            </div>\r\n            : <h3>No results</h3>}\r\n          </div>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n\r\n  /* COVID Cases Mini - App - Anyeli*/\r\n  //Using GET /vaccines endpoint from https://github.com/M-Media-Group/Covid-19-API\r\n  function CovidDisplay(){\r\n    let [countryInfo, setCountryInfo] = useState({}); //countryInfo is the vaccine data for country\r\n    let [inputValue, setInputValue] = useState(\"\"); //inputValue is the country the user entered\r\n    const [found, setFound]= useState(false); //whether the country is found or not\r\n    let onChange = (event) => {\r\n      setInputValue(event.target.value);\r\n    }; \r\n  \r\n    useEffect(() => {\r\n      getVaccineInfo();\r\n    },\r\n    []); //this calls getvaccine info when search button is clicked\r\n  \r\n   \r\n    let getVaccineInfo = async() => {\r\n      /*In the API, it says country is case sensitive, this attempts to fix errors in inputValue\r\n      Example of country names: venezuela, UNITED STATES, ColOmbia, Trinidad and Tobago\r\n      */\r\n      let editedInput = inputValue.toLowerCase(); //Everything is lower case \r\n\r\n      /*\r\n      The following way to capitalize each word is an edited version of\r\n      https://stackoverflow.com/questions/47405920/how-to-capitalize-first-letter-of-each-word-in-input-type-text\r\n      */\r\n      editedInput= editedInput.split(' ').map(eachWord=>\r\n        eachWord.charAt(0).toUpperCase() + eachWord.slice(1)\r\n      ).join(' '); //Each word is split by spaces and for each word, the first char is capitalized \r\n\r\n      //Every word is capitalized - but this is a problem if the country has an and in it\r\n      if(editedInput.indexOf(\" And \")!==-1) //if there's an And  (ex: Trinidad And Tobago)\r\n      {\r\n        //Get the word before the And\r\n        let wordBefore = editedInput.substring(0,editedInput.indexOf(\" And \")); //word before And - ex: Trinidad\r\n        let wordAfter = editedInput.slice(editedInput.indexOf(\" And \")+5); //word after And - ex: Tobago\r\n        editedInput=wordBefore+\" and \"+wordAfter; //ex:Trinidad and Tobago\r\n      }\r\n\r\n      inputValue = editedInput; //locally so that it can be fetched correctly\r\n      setInputValue(editedInput); //globally so that the input in the search area gets changed\r\n      //console.log(inputValue);\r\n      \r\n\r\n      //This uses the covid api vaccines endpoint to return information for all countries\r\n      let response = await fetch(\"https://covid-api.mmediagroup.fr/v1/vaccines?\"); \r\n      let info = await response.json(); //this has info updated hourly about vaccines \r\n      //console.table(info['United States'].All);\r\n      //console.table(info[inputValue].All);\r\n      \r\n      //The JSON response doesn't handle errors if a country was entered wrong\r\n      try {\r\n        setCountryInfo(info[inputValue].All); //but if this gives an error, country was entered wrong (or nothing has been entered)\r\n        setFound(true); //country has been found, so the data can be displayed\r\n      }\r\n      catch(error){\r\n        console.error();\r\n        setFound(false); //country has not been found, so display no results\r\n      }\r\n      // console.table(countryInfo);\r\n    };\r\n    \r\n\t  return(\r\n\t  <div className=\"App\">\r\n      <div className=\"vaccineHeader\">\r\n        <h1> COVID Vaccine Data For Countries</h1>\r\n      </div>\r\n        <div id=\"display\">\r\n          <div id=\"searchBar\">\r\n            <label>Enter a country: </label>\r\n              <input\r\n                type = \"text\"\r\n                id = \"search\"\r\n                value = {inputValue}\r\n                onChange = {onChange}\r\n              />\r\n              <button id=\"searchButton\" onClick={getVaccineInfo}>Search</button> {/* once search is clicked, get vaccine info*/}\r\n          </div>\r\n          <div id=\"displayInfo\"> {/* if country is found, display date - if not, display no results*/}\r\n          {found ? \r\n            <div>\r\n            <h3>Country: {inputValue}</h3>\r\n            <h3>Vaccines Administered: {countryInfo.administered}</h3>\r\n            <h3>People Partially Vaccinated: {countryInfo.people_partially_vaccinated}</h3>\r\n            <h3>People Fully Vaccinated: {countryInfo.people_vaccinated}</h3>\r\n            <h3>When This Info Was Last Updated (YYYY/MM/DD): {countryInfo.updated}</h3>\r\n            </div>\r\n            : <h3>No results</h3>}\r\n          </div>\r\n        </div>\r\n    </div>\r\n\t);\r\n  }\r\n  return (\r\n\t<div>\r\n    <GithubDisplay />\r\n    <LyricsDisplay/>\r\n    <WeatherDisplay/>\r\n    <CovidDisplay/>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}